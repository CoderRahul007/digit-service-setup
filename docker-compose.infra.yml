version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${PROJECT_DIR}/scripts/sql/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    command: >
      sh -c "redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes"
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:7.17.15
    container_name: ${COMPOSE_PROJECT_NAME}-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin=* 
      - cluster.name=${ES_CLUSTER_NAME}
      - bootstrap.memory_lock=true
    ports:
      - "${ES_PORT}:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health > /dev/null"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ${COMPOSE_PROJECT_NAME}-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ${COMPOSE_PROJECT_NAME}-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,INTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped

  nginx-gateway:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-gateway
    ports:
      - "${GATEWAY_PORT}:80"
    volumes:
      - ${PROJECT_DIR}/config:/etc/nginx:ro
    networks:
    - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "wget -q -S -O - http://localhost/health 2>&1 | grep '200 OK' >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  kafka_data:

networks:
  ${NETWORK_NAME}:
    driver: bridge
